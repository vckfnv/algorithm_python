# -*- coding: utf-8 -*-
"""week11_dp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-YBPsXlBCO6EtO7OjUZRnghBeOh9pLz
"""

S = [5, 2, 3, 4, 6] 

def matrix_chain(S):
    size = len(S) - 1
    
    # Step 1. initialize for memoization
    N = [[-1] * size for _ in range(size)]
    
    for i in range(size):
        N[i][i] = 0

    # Step 2. calculate the minimum number of operations
    for b in range(1, size):
        #b = j - i is the length of the problem, 
        for i in range(0, size - b):
            j = b + i 
            N[i][j] = float('inf')
            for k in range(i, j):
                N[i][j] = min(N[i][j], N[i][k] + N[k+1][j] + (S[i] * S[k+1] * S[j+1]))
    print(N)
    return N[0][size-1]           

print("The minimum number of operations =", matrix_chain(S))
