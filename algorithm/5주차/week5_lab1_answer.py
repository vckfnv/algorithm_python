# -*- coding: utf-8 -*-
"""week5_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_JO6Rvk2bVblsfbnE3muoH7a3r0spX2m
"""

class MaxHeap:
    
    def __init__(self):
        self.queue = [None]
    
    def insert(self, value):
        ## Insert a new value into heap 
        """
        Input:  value
        Output: None
        """

        
    def delete(self):
        ## Delete root node
        """
        Input:  None
        Output: if heap is empty print('Heap is empty')
                return deleted value
        """
        if len(self.queue) == 1:
            print("Heap is empty")
            return
        
        item = self.queue[1]
        self.queue[1] = self.queue[len(self.queue)-1]
        self.queue[len(self.queue)-1]= item
        
        self.queue.pop()
        
        i = 1
        while i <= len(self.queue)-1:
            # -------------Fill in the blank
            # HINT- left = i*2
            #     - right = i*2 + 1


        return item

def main():

    maxheap = MaxHeap()
    
    maxheap.insert(5)
    maxheap.insert(7)
    maxheap.insert(6)
    maxheap.insert(9)
    maxheap.insert(2)
    print(maxheap.queue)
    maxheap.insert(4)
    maxheap.insert(3)
    maxheap.insert(2)
    maxheap.insert(8)
    print(maxheap.queue)
    
    maxheap.delete()
    print(maxheap.queue)
    
main()

"""### Answer"""

class MaxHeap:
    
    def __init__(self):
        self.queue = [None]
    
    def insert(self, value):
        ## Insert a new value into heap  
        """
        Input:  value
        Output: None
        """   
        self.queue.append(value)
        
        i = len(self.queue)-1
        while i>1:
            parent = i // 2
            if self.queue[i] > self.queue[parent]:
                tmp = self.queue[i]
                self.queue[i] = self.queue[parent]
                self.queue[parent] = tmp
                i = parent
            else:
                break
                
    def delete(self):
        ## Delete root node
        """
        Input:  None
        Output: if heap is empty print('Heap is empty')
        """ 
        if len(self.queue) == 1:
            print("Heap is empty")
            return
        
        item = self.queue[1]
        self.queue[1] = self.queue[len(self.queue)-1]
        self.queue[len(self.queue)-1]= item
        
        self.queue.pop()
        
        i = 1
        while i <= len(self.queue)-1:
            
            left = i*2
            right = i*2 + 1
            largest = i

            if left <= len(self.queue)-1 and self.queue[left] > self.queue[largest]:
                largest = left
            
            if right <= len(self.queue)-1 and self.queue[right] > self.queue[largest]:
                largest = right
            
            if largest != i:
                tmp = self.queue[i]
                self.queue[i] = self.queue[largest]
                self.queue[largest] = tmp
                i = largest
            else:
                break
        
        return item
    
def main():

    maxheap = MaxHeap()
    
    maxheap.insert(5)
    maxheap.insert(7)
    maxheap.insert(6)
    maxheap.insert(9)
    maxheap.insert(2)
    print(maxheap.queue)
    maxheap.insert(4)
    maxheap.insert(3)
    maxheap.insert(2)
    maxheap.insert(8)
    print(maxheap.queue)
    
    maxheap.delete()
    print(maxheap.queue)
    
main()