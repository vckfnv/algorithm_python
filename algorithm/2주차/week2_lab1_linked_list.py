# -*- coding: utf-8 -*-
"""week2_lab1_linked_list

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pb9Y0ZI5nVz3H7Vn82Cnr6Xo9A008Oqj
"""

class Node:
    
    def __init__(self, value):
        self.value = value
        self.next = None


class LinkedList:
    
    def __init__(self):
        self.head = None

    def add_last(self, item):
        # Add a value in the end of the list
        pass

    def add_first(self, item):
        ## Completed Function - Do not remove
        # Add a value in the begin of the list
        new_node = Node(item)
        
        if not self.is_empty():
            new_node.next = self.head

        self.head = new_node
        

    def add(self, pos, item):
        # Add a value in the 'pos' position of the list
        # Ex.   linked list values>  3 -> 7 -> 4
        #       >>> add(2, 5)
        #       linked list values>  3 -> 5 -> 7 -> 4
        pass
    
    def delete_last(self):
        # Delete a value in the end of the list
        pass
    
    def delete_first(self):
        # Delete a value in the begin of the list
        pass

        
    def display(self):
        ## Completed Function - Do not remove
        # Display value(s) of the list
        if self.is_empty():
            print("linked list is empty !!")
            
        else:
            values = []

            start_node = self.head
            while start_node:
                values.append(start_node.value)
                start_node = start_node.next

            print("linked list values> ", ' -> '.join(map(str,values)))
            
            
    def get_length(self):
        # Get length of the list
        pass

    def is_empty(self):
        # Check if the list is empty
        pass
    
def main():
    
    linked_list = LinkedList()
    
    linked_list.add_last(3)
    linked_list.add_last(7) 
    linked_list.add_last(4) 
    linked_list.display() # Expected Result: linked list values>  3 -> 7 -> 4
    

    linked_list.add_first(1)
    linked_list.add_first(2)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 3 -> 7 -> 4

    linked_list.add(7, 100) # Expected Result: list position out of range !!
    
    linked_list.add(3, 100)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 100 -> 3 -> 7 -> 4
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list values>  1 -> 100 -> 3 -> 7
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.delete_first()
    linked_list.display() # Expected Result: linked list values>  3
    
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list is empty !!
    
        
main()

"""### Answer"""

class Node:
    
    def __init__(self, value):
        self.value = value
        self.next = None


class LinkedList:
    
    def __init__(self):
        self.head = None

    def add_last(self, item):
        # Add a value in the end of the list
        new_node = Node(item)
        
        if self.is_empty():
            self.head = new_node
            
        else:
            start_node = self.head
            while start_node.next:
                start_node = start_node.next
                
            start_node.next = new_node

            
    def add_first(self, item):
        ## Completed Function - Do not remove
        # Add a value in the begin of the list
        new_node = Node(item)
        
        if not self.is_empty():
            new_node.next = self.head

        self.head = new_node
        

    def add(self, pos, item):
        # Add a value in the 'pos' position of the list
        # Ex.   linked list values>  3 -> 7 -> 4
        #       >>> add(2, 5)
        #       linked list values>  3 -> 5 -> 7 -> 4

        
        if pos < 0 or pos > self.get_length()+1:
            print("list position out of range !!")
        
        else:
            new_node = Node(item)
            start_node = self.head
            
            if pos == 1:
                self.head = new_node
                new_node.next = start_node
            
            else:
                for i in range(1,pos-1):
                    start_node = start_node.next
        
                new_node.next = start_node.next
                start_node.next = new_node
    
    
    def delete_last(self):
        # Delete a value in the end of the list
        if self.is_empty():
            print("linked list is empty !!")
            
        elif not self.head.next:
            self.head = None
            
        else:
            start_node = self.head
            prev_node = None
            
            while start_node.next:
                prev_node = start_node
                start_node = start_node.next
            
            
            prev_node.next=None 
        
        
    
    def delete_first(self):
        ## Completed Function - Do not remove
        # Delete a value in the begin of the list
        if self.is_empty():
            print("linked list is empty !!")
        
        else:
            start_node = self.head
            self.head = start_node.next

        
    def display(self):
        ## Completed Function - Do not remove
        # Display value(s) of the list
        if self.is_empty():
            print("linked list is empty !!")
            
        else:
            values = []

            start_node = self.head
            while start_node:
                values.append(start_node.value)
                start_node = start_node.next

            print("linked list values> ", ' -> '.join(map(str,values)))
            
            
    def get_length(self):
        # Get length of the list
        length = 0
        
        start_node = self.head
        while start_node:
            length += 1
            start_node = start_node.next
            
        return length


    def is_empty(self):
        ## Completed Function - Do not remove
        # Check if the list is empty
        return True if not self.head else False
    
def main():
    
    linked_list = LinkedList()
    
    linked_list.add_last(3)
    linked_list.add_last(7) 
    linked_list.add_last(4) 
    linked_list.display() # Expected Result: linked list values>  3 -> 7 -> 4
    

    linked_list.add_first(1)
    linked_list.add_first(2)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 3 -> 7 -> 4

    linked_list.add(7, 100) # Expected Result: list position out of range !!
    
    linked_list.add(3, 100)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 100 -> 3 -> 7 -> 4
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list values>  1 -> 100 -> 3 -> 7
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.delete_first()
    linked_list.display() # Expected Result: linked list values>  3
    
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list is empty !!
    
        
if __name__ == "__main__":
    main()