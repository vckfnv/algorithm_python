# -*- coding: utf-8 -*-
"""week02_linked_list

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pb9Y0ZI5nVz3H7Vn82Cnr6Xo9A008Oqj
"""

class Node:
    
    def __init__(self, value):
        self.value = value
        self.next = None


class LinkedList:
    
    def __init__(self):
        self.head = None

    def add_last(self, item):
        # Add a value in the end of the list
        new_node = Node(item)
        if self.head == None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
        pass

    def add_first(self, item):
        ## Completed Function - Do not remove
        # Add a value in the begin of the list
        new_node = Node(item)
        #if self.head == None:
        #    self.head = new_node
        #else:
        #    new_node.next = self.head
        #    self.head = new_node
        if self.head:
            new_node.next = self.head
        self.head = new_node

    def add(self, pos, item):
        # Add a value in the 'pos' position of the list
        # Ex.   linked list values>  3 -> 7 -> 4
        #       >>> add(2, 5)
        #       linked list values>  3 -> 5 -> 7 -> 4
        new_node = Node(item)
        if pos == 1:
            new_node.next = self.head
            self.head = new_node
        elif pos <= self.get_length() :
            temp = self.head
            for i in range(pos-2):
                temp=temp.next
            new_node.next = temp.next
            temp.next = new_node
        else:
            print("list position out of range")
        pass
    
    def delete_last(self):
        # Delete a value in the end of the list
        if self.head == None:
            print("nothing to delete")
        else:
            prev = self.head
            temp = self.head.next
            if temp == None:
                self.head = None
            else:
                while temp.next != None:
                    temp = temp.next
                    prev = prev.next
                prev.next = None
    
    def delete_first(self):
        # Delete a value in the begin of the list
        if self.head == None:
            print("nothing to delete")
        else:
            temp = self.head
            self.head = temp.next

        
    def display(self):
        ## Completed Function - Do not remove
        # Display value(s) of the list
        if self.is_empty():
            print("linked list is empty !!")
            
        else:
            values = []

            start_node = self.head
            while start_node:
                values.append(start_node.value)
                start_node = start_node.next

            print("linked list values> ", ' -> '.join(map(str,values)))
            
            
    def get_length(self):
        # Get length of the list
        temp = self.head
        listlen = 0
        while temp != None:
            temp = temp.next
            listlen +=1
        return listlen

        

    def is_empty(self):
        # Check if the list is empty
        #temp = self.head
        #if temp == None:
        #    return True
        #else:
        #    return False
        return True if not self.head else False
    
def main():
    
    linked_list = LinkedList()
    
    linked_list.add_last(3)
    linked_list.add_last(7)
    linked_list.add_last(4) 
    linked_list.display() # Expected Result: linked list values>  3 -> 7 -> 4
    

    linked_list.add_first(1)
    linked_list.add_first(2)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 3 -> 7 -> 4

    linked_list.add(7, 100) # Expected Result: list position out of range !!
    
    linked_list.add(3, 100)
    linked_list.display() # Expected Result: linked list values>  2 -> 1 -> 100 -> 3 -> 7 -> 4
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list values>  1 -> 100 -> 3 -> 7
    
    linked_list.delete_first()
    linked_list.delete_last()
    linked_list.delete_first()
    linked_list.display() # Expected Result: linked list values>  3
    
    linked_list.delete_last()
    linked_list.display() # Expected Result: linked list is empty !!
    
        
main()

